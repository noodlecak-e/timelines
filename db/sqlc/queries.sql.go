// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
        name,
        description,
        start_date,
        end_date,
        one_time
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, start_date, end_date, one_time
`

type CreateEventParams struct {
	Name        string
	Description sql.NullString
	StartDate   time.Time
	EndDate     sql.NullTime
	OneTime     bool
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.OneTime,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.OneTime,
	)
	return i, err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, description, start_date, end_date, one_time
FROM events
WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.OneTime,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, name, description, start_date, end_date, one_time
FROM events OFFSET $1
LIMIT $2
`

type GetEventsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.OneTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
